<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="xRRgvHNlG#rZ^u`HECiY" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="/]CI_kvuDj]iD;uTh+=Q" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace sensors {" line1="" line2="    function signal_dht11(pin: DigitalPin): void {" line3="        pins.digitalWritePin(pin, 0);" line4="        basic.pause(18);" line5="        let i = pins.digitalReadPin(pin);" line6="        pins.setPull(pin, PinPullMode.PullUp);" line7="    }" line8="" line9="    function dht11_read(pin: DigitalPin): number {" line10="        signal_dht11(pin);" line11="" line12="        // Wait for response header to finish" line13="        while (pins.digitalReadPin(pin) == 1);" line14="        while (pins.digitalReadPin(pin) == 0);" line15="        while (pins.digitalReadPin(pin) == 1);" line16="" line17="        let value = 0;" line18="        let counter = 0;" line19="" line20="        for (let j = 0; j &lt;= 32 - 1; j++) {" line21="            while (pins.digitalReadPin(pin) == 0);" line22="            counter = 0" line23="            while (pins.digitalReadPin(pin) == 1) {" line24="                counter += 1;" line25="            }" line26="            if (counter &gt; 4) {" line27="                value = value + (1 &lt;&lt; (31 - j));" line28="            }" line29="        }" line30="        return value;" line31="    }" line32="" line33="    export enum Dht11Result {" line34="        //% block=&quot;Celsius&quot;" line35="        Celsius," line36="        //% block=&quot;Fahrenheit&quot;" line37="        Fahrenheit," line38="        //% block=&quot;humidity&quot;" line39="        humidity" line40="    }" line41="" line42="    //% blockId=get_DHT11_value block=&quot;DHT11 set pin %pin_arg|get %dhtResult&quot; blockExternalInputs=true" line43="    //% pin_arg.fieldEditor=&quot;gridpicker&quot; pin_arg.fieldOptions.columns=4" line44="    //% pin_arg.fieldOptions.tooltips=&quot;false&quot; pin_arg.fieldOptions.width=&quot;300&quot;" line45="    export function get_DHT11_value(pin_arg: DigitalPin, dhtResult: Dht11Result): number {" line46="        switch (dhtResult) {" line47="            case Dht11Result.Celsius: return (dht11_read(pin_arg) &amp; 0x0000ff00) &gt;&gt; 8;" line48="            case Dht11Result.Fahrenheit: return ((dht11_read(pin_arg) &amp; 0x0000ff00) &gt;&gt; 8) * 9 / 5 + 32;" line49="            case Dht11Result.humidity: return dht11_read(pin_arg) &gt;&gt; 24;" line50="            default: return 0;" line51="        }" line52="    }" line53="" line54="    export enum PingUnit {" line55="        //% block=&quot;cm&quot;" line56="        Centimeters," line57="        //% block=&quot;inches&quot;" line58="        Inches," line59="        //% block=&quot;μs&quot;" line60="        MicroSeconds" line61="    }" line62="" line63="    export enum LEDType {" line64="        //% block=&quot;cathode&quot;" line65="        cathode," line66="        //% block=&quot;anode&quot;" line67="        anode" line68="    }" line69="" line70="    //% blockId=sensor_ping block=&quot;ultrasonic trig %trig|echo %echo|get distance %unit&quot;" line71="    //% trig.fieldEditor=&quot;gridpicker&quot; trig.fieldOptions.columns=4" line72="    //% trig.fieldOptions.tooltips=&quot;false&quot; trig.fieldOptions.width=&quot;300&quot;" line73="    //% echo.fieldEditor=&quot;gridpicker&quot; echo.fieldOptions.columns=4" line74="    //% echo.fieldOptions.tooltips=&quot;false&quot; echo.fieldOptions.width=&quot;300&quot;" line75="    export function sensor_ping(trig: DigitalPin, echo: DigitalPin, unit: PingUnit, maxCmDistance = 500): number {" line76="        // send pulse" line77="        pins.setPull(trig, PinPullMode.PullNone);" line78="        pins.digitalWritePin(trig, 0);" line79="        control.waitMicros(2);" line80="        pins.digitalWritePin(trig, 1);" line81="        control.waitMicros(10);" line82="        pins.digitalWritePin(trig, 0);" line83="" line84="        // read pulse" line85="        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 43);" line86="" line87="        switch (unit) {" line88="            case PingUnit.Centimeters: return d / 43;" line89="            case PingUnit.Inches: return d / 110;" line90="            default: return d;" line91="        }" line92="    }" line93="    //% blockId=RGBLight block=&quot;set RGB type:common %myType|red pin %RedPin|green pin %GreenPin|blue pin %BluePin|value of red(0~255) %RedValue|value of green(0~255) %GreenValue|value of blue(0~255) %BlueValue&quot; blockExternalInputs=false" line94="    //% RedValue.min=0 RedValue.max=255 GreenValue.min=0 GreenValue.max=255 BlueValue.min=0 BlueValue.max=255" line95="    //% RedPin.fieldEditor=&quot;gridpicker&quot; RedPin.fieldOptions.columns=4" line96="    //% RedPin.fieldOptions.tooltips=&quot;false&quot; RedPin.fieldOptions.width=&quot;300&quot;" line97="    //% GreenPin.fieldEditor=&quot;gridpicker&quot; GreenPin.fieldOptions.columns=4" line98="    //% GreenPin.fieldOptions.tooltips=&quot;false&quot; GreenPin.fieldOptions.width=&quot;300&quot;" line99="    //% BluePin.fieldEditor=&quot;gridpicker&quot; BluePin.fieldOptions.columns=4" line100="    //% BluePin.fieldOptions.tooltips=&quot;false&quot; BluePin.fieldOptions.width=&quot;300&quot;" line101="    export function RGBLight(myType: LEDType, RedPin: AnalogPin, GreenPin: AnalogPin, BluePin: AnalogPin, RedValue: number, GreenValue: number, BlueValue: number): void {" line102="        pins.analogWritePin(RedPin, pins.map((myType == LEDType.cathode ? RedValue : (255 - RedValue)), 0, 255, 0, 1023));" line103="        pins.analogWritePin(GreenPin, pins.map((myType == LEDType.cathode ? GreenValue : (255 - GreenValue)), 0, 255, 0, 1023));" line104="        pins.analogWritePin(BluePin, pins.map((myType == LEDType.cathode ? BlueValue : (255 - BlueValue)), 0, 255, 0, 1023));" line105="    }" line106="}" numlines="107"></mutation></block></statement></block></xml>